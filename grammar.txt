program        ::= 'program' identifier 'is' procedure_list 'begin' statement_list 'end' 'program' '.'

procedure_list ::= funct_definition
                 | variable_declaration
                 | global_var_declaration

statement_list ::= statement
                 | statement statement_list

statement      ::= assignment
                 | if_statement
                 | for_statement
                 | 'return' expression ';'

funct_definition       ::= 'procedure' identifier ':' 'INT|FLOAT|STRING|BOOL'  '(' variable_declaration?
                          | ',' variable_declaration
                          | ')' procedure_list 'begin' statement_list 'endprocedure'

variable_declaration   ::= 'variable' identifier ':' 'INT|FLOAT|STRING|BOOL'';'

global_var_declaration ::= 'global' 'variable' identifier ':' 'INT|FLOAT|STRING|BOOL'';'

assignment      ::= (type)identifier ':=' expression|conditonal ';'

list_declaration       ::= list identifier ':' INT|FLOAT|STRING|BOOL ';'
		  
list_assignment ::= (list)identifier ':=' identifier ';' | '[' expression|conditonal
		          | ',' expression|conditonal
		          | ']' ';'

list_operators  ::= (list (int|float))identifier '[' (INTLITERAL|(int)identifier)>=0 ']' 
                  | ('+' | '-') term
                  | ('*' | '/') factor

i_assignment    ::= (list (type))identifier '[' (INTLITERAL|(int)identifier)>=0 ']' '='
                  | BOOLLITERAL|INTLITERAL|FLOATLITERAL|STRLITERAL
                  | (type)identifier

if_statement    ::= 'if' '(' condition ')' 'then' statement_list 
                  | else_statement? 
                  | 'end' 'if'

else_statement  ::= 'else' statement_list

*for_statement  ::= 'for' '(' variable_declaration(/w assignment) ';' condition ';' expression ')' statement_list 'end' 'for'

condition       ::= expression ('==') expression -> all types 
                  | expression ('!=' | '<' | '>' | '<=' | '>=') expression -> (BOOL|INT) & (INT|FLOAT)
                  | BOOLLITERAL
                  | (bool)identifier

expression      ::= term
                  | expression ('+' | '-') term -> ints and floats(truncate when int)

term            ::= factor
                  | term ('*' | '/') factor -> int and floats(truncate when int)
                  | term ('&' | '|') factor -> int

factor          ::= identifier
                  | identifier '(' 
                  | expression
                  | , expression
                  | ')'
                  | -INTLITERAL|-FLOATLITERAL
                  | BOOLLITERAL|INTLITERAL|FLOATLITERAL|STRLITERAL
                  | '(' expression ')'

identifier      ::= [a-zA-Z][a-zA-Z0-9]*

number          ::= [0-9]+